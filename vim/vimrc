" Authors: Rocela Durazo
" Description: Vim configuration file

"------------------------------------------------------------
" Enable syntax highlighting
set termguicolors
let g:dracula_italic = 0
colorscheme dracula
highlight Normal ctermbg=None
syntax on

"------------------------------------------------------------
" Vundle stuff
set nocompatible              " be iMproved, required
filetype off                  " required
runtime macros/matchit.vim
set gfn=Monaco:h15
set linespace=2
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'thoughtbot/vim-rspec'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-syntastic/syntastic'
Plugin 'jiangmiao/auto-pairs'
Plugin 'szw/vim-tags'
"Plugin 'wikitopian/hardmode'
Plugin 'rhysd/git-messenger.vim'
Plugin 'yegappan/mru'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'

call vundle#end()            " required
filetype plugin indent on    " required

"------------------------------------------------------------
" Mappings
"
" Useful mappings
"Use ; as :
nore ; :
let mapleader = ","

" Maps
nmap <leader>vr :tabe $MYVIMRC<cr>
nmap <leader>tm :tabe ~/.tmux.conf<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <Leader>bi :source ~/.vimrc<cr>:PluginInstall<cr>

" Dismiss search highlight
nmap <Leader><Space> :nohl<cr>
" Quick save and quit
nmap <leader>w :w<cr>
nmap <leader>s :w<cr>
nmap <leader>q :q<cr>
nmap <leader>wq :wq<cr>
nmap <leader>r :Rails<cr>
nmap <leader>pr ibinding.pry<Esc>

" Command aliases for typoed commands (accidentally holding shift too long)
command! Q q " Bind :Q to :q
command! Qall qall
command! QA qall
command! E e

" Navigation keymaps
" Fast jump
nmap J 5j
nmap K 5k
xmap J 5j
xmap K 5k
" Jump through lines
nnoremap j gj
nnoremap k gk

" Copies the visually selected text, Then starts a search command and pastes the copied text into the search.
vnoremap // y/<C-R>"<CR>

" Window control
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Switch tab with tab!
nmap <Tab> gt
nmap <S-Tab> gT

"------------------------------------------------------------
" setup
set number     " line number
set numberwidth=3
set textwidth=100
set colorcolumn=+1
set backupdir=~/.tmp
set directory=~/.tmp    " Don't clutter my dirs up with swp and tmp files
set history=500    " keep 500 lines of command line history
set ruler    " show the cursor position all the time
set showcmd    " display incomplete commands
autocmd BufNewFile,BufRead *.decorator set syntax=ruby

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Display extra whitespace
" set list listchars=tab:¬ª¬∑,trail:¬∑,nbsp:¬∑

" Use one space, not two, after punctuation.
set nojoinspaces

" Use ack instead of grep
""let g:ackprg = 'ag --nogroup --nocolor --column'
set grepprg=ack
" keybinding for Ack!
vnoremap <Leader>f y:Ack<Space><C-R>"<CR>
nnoremap <Leader>f :Ack<Space>
nnoremap <Leader>p :AckFile<Space>

"" Command-P
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=coverage*
set wildignore+=*/tmp/*
set wildignore+=*/node_modules/*
set wildignore+=public/*
let g:CommandTMaxHeight=15

"" Ctags + Ctrlp
 " ctags optimization
""set autochdir
set tags=tags,~/.git/tags;
nnoremap <Leader>. :CtrlPTag<cr>
if executable('ag')
  let g:ctrlp_user_command = ['ag %s --files-with-matches -g ""']
  let g:ctrlp_user_command += ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
endif

"" NERDTree configuration
let g:NERDTreeWinPos = "right"
"let NERDTreeShowHidden=1
" Fix G^
let g:NERDTreeNodeDelimiter = "\u00a0"
"" Find current file in NERDTree
nnoremap <Leader>n :NERDTreeFind<CR>
"" Open NERDTree
nnoremap <Leader>k :NERDTreeToggle<CR>

"" Search configuration
set hlsearch
set incsearch
set ignorecase
set smartcase

" Delete trailing whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
let g:syntastic_haml_checkers = ['haml_lint']
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'eslint'
let g:syntastic_error_symbol = '‚ùå'
let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
let g:syntastic_warning_symbol = '‚ö†Ô∏è'
let g:syntastic_style_warning_symbol = 'üí©'

" RSpec.vim mappings
"let g:rspec_command = "rspec -fd {spec}"
let g:rspec_command = "VtrSendCommandToRunner! dcrspec {spec}"

map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

""map <Leader>t :w<CR>:Dispatch docker-compose run --rm test bundle exec rspec %<CR>
""map <Leader>s :w<CR>:execute 'Dispatch docker-compose run --rm test bundle exec rspec %:'.line(".")<CR>
""map <Leader>rc :Dispatch rubocop %<CR>
map <Leader>rf :Dispatch! rubocop --safe-auto-correct %<CR>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>
nnoremap <leader>rc :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'dcrailsc'}<cr>
nnoremap <leader>dca :VtrOpenRunner {'orientation': 'v', 'percentage': 20, 'cmd': 'dca'}<cr>
nnoremap <leader>gst :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'gst'}<cr>

"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>

" HardMode
"autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
"nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

"functions"
function! GotoJump()
  jumps
  let j = input("Please select your jump: ")
  if j != ''
    let pattern = '\v\c^\+'
    if j =~ pattern
      let j = substitute(j, pattern, '', 'g')
      execute "normal " . j . "\<c-i>"
    else
      execute "normal " . j . "\<c-o>"
    endif
  endif
endfunction

nmap <Leader>j :call GotoJump()<CR>

"" Open MRU.vim to see the recently open files
map <leader>h :MRU<CR>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
